#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server-2:server');
var http = require('http');
var cors = require("cors");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const socketServer = server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(socketServer,{
  pingTimeout : 60000,
  cors : {
    origin : "*"
  },
});

io.on("connection",(socket)=>{
  console.log("Connected to socket.io");

  socket.on('setup',(userData)=>{
    socket.join(userData._id);
    console.log(userData._id);
    socket.emit('connected');
  });

  socket.on('join chat',(room)=>{
    socket.join(room);
    console.log('User joined room : ' + room);
  });

  socket.on('typing',(room)=>{
    socket.in(room).emit('typing')
  });

  socket.on('stop typing',(room)=>{
    socket.in(room).emit('stop typing')
  });

  socket.on('new message',(newMessageRecieved)=>{
    var chat = newMessageRecieved.chat;

    if(!chat.users){
      return console.log("chat.users not defined");
    }

    chat.users.forEach((user)=>{
      if(user._id == newMessageRecieved.sender._id){
        return ;
      }
      socket.in(user._id).emit("message recieved",newMessageRecieved);
    });
  });

  socket.off('setup',(userData)=>{
    console.log("USER DISCONNECTED");
    socket.leave(userData._id);
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
